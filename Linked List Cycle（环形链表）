/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    //利用快慢指针，快指针比慢指针多走一步，有环一定相遇
    if (head == NULL || head->next == NULL)
        return false;
    struct ListNode* slow = head, *fast = head;
    while (fast)
    { 
        //如果有很多的节点，并且没有环，那么就要考虑为空或者指向下一个为空的情况了
        
        fast = fast->next->next; 
        slow = slow->next;
        if (fast == NULL || fast->next == NULL)
            return false;
        if (fast == slow)//不放前面是因为slow和fast开始指向的位置一样
            return true;
    }
    return false;
    // if (head == NULL || head->next == NULL)
    // {
    //     return false;
    // }
    // struct ListNode* slow = head, *fast = head;
    // while (fast)
    // {
    //     if (fast == NULL || fast->next == NULL)
    //         return false;
    //     fast = fast->next->next;
    //     slow = slow->next;
    //     if (fast == slow)
    //         return true;
    // }
    // return false;
}

https://leetcode.cn/problems/linked-list-cycle/description/
