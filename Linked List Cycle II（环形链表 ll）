/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    struct ListNode* tailA = headA, *tailB = headB;
    int lenA = 0;
    int lenB = 0;
    //求出两个链表的长度
    while (tailA)
    {
        lenA++;
        tailA = tailA->next;
    }
    while (tailB)
    {
        lenB++;
        tailB = tailB->next;
    }
    //求出差距步
    int gap = abs(lenA - lenB);
    //让长的链表走差距步
    struct ListNode* longlist = headA, *shortlist = headB;
    if (lenA < lenB)
    {
        longlist = headB;
        shortlist = headA;
    }
    while (gap--)
    {
        longlist = longlist->next;
    }
    //最后一起走，判断指向的节点地址是否相等
    while (longlist != shortlist)
    {
        longlist = longlist->next;
        shortlist = shortlist->next;
    }
    return longlist;
      


}
struct ListNode *detectCycle(struct ListNode *head) {
    struct ListNode* slow, *fast;
    slow = fast = head;
    //先来找到相遇点，让fast比slow快一步，便可以找到
    while (fast && fast->next)
    {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
        {
            //找到了的话，就可以利用结论来写了
            //结论：在一个有环的链表中，一个指针从起始点走，另一个指针从相遇点走，必然在入口点相遇
            struct ListNode* meet = slow;
            struct ListNode* lt1 =  meet->next;
            struct ListNode* lt2 = head;
            meet->next= NULL;//如果这里不置为空,那么求的链表长度就会一直增加，因为这是环，没有断开就一直循环。
            //到了入口点就返回入口点的地址
            return getIntersectionNode(lt1, lt2);
        }
    }
    //说明链表没有环
    return NULL;
}

https://leetcode.cn/problems/linked-list-cycle-ii/description/
